diff --git a/src/entity_data.zig b/src/entity_data.zig
index d3bdb695..111c74db 100644
--- a/src/entity_data.zig
+++ b/src/entity_data.zig
@@ -75,7 +75,7 @@ pub const EventStatus = enum {
 	ignored,
 };
 
-fn BlockEntityDataStorage(comptime side: enum {client, server}, T: type) type {
+fn BlockEntityDataStorage(comptime side: enum {client, server}, T: type, serialize: *const fn (T, *main.utils.BinaryWriter) void, deserialize: *const fn(*main.utils.BinaryReader) T) type {
 	return struct {
 		pub const DataT = T;
 		pub const EntryT = struct {
@@ -85,6 +85,9 @@ fn BlockEntityDataStorage(comptime side: enum {client, server}, T: type) type {
 		var storage: List(EntryT) = undefined;
 		pub var mutex: std.Thread.Mutex = .{};
 
+		pub const loadFromBin = serialize;
+		pub const readFromBin = deserialize;
+
 		pub fn init() void {
 			storage = .init(main.globalAllocator);
 		}
@@ -173,11 +176,30 @@ fn BlockEntityDataStorage(comptime side: enum {client, server}, T: type) type {
 
 pub const EntityDataClasses = struct {
 	pub const Chest = struct {
+		const ChestData = struct {
+			id: ?u32,
+		};
 		const StorageServer = BlockEntityDataStorage(
 			.server,
+			ChestData,
+			struct {
+				pub fn serialize(self: ChestData, out: *main.utils.BinaryWriter) void {
+					out.writeInt(u1, @intFromBool(self.id != null));
+				}
+			}.serialize,
 			struct {
-				id: ?u32,
-			},
+				pub fn deserialize(data: *main.utils.BinaryReader) ChestData {
+					const isNotNull = data.readInt(u1) catch unreachable;
+					if (isNotNull == 1) {
+						return .{
+							.id = 0
+						};
+					}
+					return .{
+						.id = null
+					};
+				}
+			}.deserialize,
 		);
 
 		pub const id = "chest";
